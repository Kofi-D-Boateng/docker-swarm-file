version: "3.4"

services:
  webproxy:
    networks:
      - frontend
    image: kdboateng/nginx-certbot
    ports:
      - "443:443"
      - "80:80"
    deploy:
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.hostname == ip-172-31-38-116]

  frontend:
    container_name: frontend
    networks:
      - frontend
    image: kdboateng/lb-frontend-service
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BUFFERTIME=600000
      - REACT_APP_API_VERSION=api/v1
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints: []

  backend:
    container_name: backend
    image: kdboateng/lb-api
    networks:
      - frontend
      - backend
      - notification
      - auth
    ports:
      "8081:8081"
    environment:
      - ALLOWED_ORIGINS=
      - API_VERSION=api/v1
      - AWS_BUCKETNAME=
      - AWS_REGION=
      - AWS_ACCESS_KEY=
      - AWS_SECRET_KEY=
      - AUTH_SERVICE_DOMAIN=
      - AUTH_SERVICE_PORT=
      - AUTH_API_VERSION=
      - BANK_API_VERSION=
      - BANK_SERVICE_DOMAIN=
      - BANK_SERVICE_PORT=  
      - BANK_KH= 
      - LOGGING_TYPE=
      - PORT=
      - NOTIF_API_VERSION=
      - NOTIF_SERVICE_DOMAIN=
      - NOTIF_SERVICE_PORT=
      - REDIS_HOSTNAME=
      - REDIS_PORT=
      - RABBITMQ_URI=

  redis:
    container_name: redis
    networks:
      - backend
      - notification
    image: redis
    ports:
      - "6379:6379"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints: []

  rabbit:
    container_name: rabbitmq
    networks:
      - auth
      - backend
      - bank
      - notification
    image: rabbitmq:3.8.11
    ports:
      - "5672:5672"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      placement:
        constratins: []  

  auth:
    container_name: auth
    networks:
      - auth
    image: kdboateng/lb-auth
    environment:
      - API_VERSION=api/v1
      - DB_DRIVER=postgres
      - DB_CONN=
      - MESSAGE_BROKER_ADDR=amqp://localhost:5672
      - PORT=:5050
      - REDIS_ADDR=localhost:6379
    ports:
      - "8081:8081"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints: []

  notification:
    container_name: notification
    networks:
      - notification
    image: kdboateng/lb-notifications-go
    environment:
      - GO_ENV=prod
      - PORT=:5500
      - API_VERSION=api/v2
      - MONGO_URI=
      - DB_NAME=
      - USERS_COLLECTION=
      - CUSTOMER_SERVICE_COLLECTION=
      - SMTP_HOST=smtp.office365.com
      - SMTP_PORT=587
      - COMPANY_EMAIL=
      - COMPANY_PASSWORD=
      - ACCT_AUTH_LINK=http://www.legacybanking.us/confirm-account
    ports:
      - "5500:5500"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints: []

  bank:
    container_name: bank
    networks:
      - bank
    image: kdboateng/lb-banking-api
    environment:
      - SPRING_DATASOURCE_URL=
      - SPRING_DATASOURCE_USERNAME=
      - SPRING_DATASOURCE_PASSWORD=
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=false
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL=true
    ports:
      - "8080:8080"
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
      placement:
        constraints: []

networks:
  frontend:
    external: false
  backend:
    external: false
  auth:
    external: false
  notification:
    external: false
  
